{"timestamp":"2025-10-13T17:39:42.999Z","type":"session_meta","payload":{"id":"0199dea8-1b11-77b1-b9ba-16959f8a4a93","timestamp":"2025-10-13T17:39:42.993Z","cwd":"/workspace","originator":"codex_cli_rs","cli_version":"0.46.0","instructions":"# Repository Guidelines\n\n## Project Structure & Module Organization\nCore Python modules live in `ktransformers/` (scheduler logic, server entrypoints, optimization rules). CUDA/C++ kernels and build helpers sit in `csrc/`, with compiled artifacts landing under `build/`. Reference models, prompts, and evaluation sets are versioned in `data/` and `ktransformers/tests/`. Documentation and specs reside in `docs/` and `specs/`, while automation scripts live in `scripts/` (for example `scripts/initial_build.sh`). Treat `third_party/` as read-only vendor code.\n\n## Build, Test, and Development Commands\nInstall editable dependencies with `pip install -e .` from `/workspace` to make the Python package importable. Use `bash scripts/initial_build.sh` for a full CUDA toolchain bootstrap, or `bash scripts/quick_build.sh` for incremental rebuilds after minor changes. Launch the FastAPI server locally via `python -m ktransformers.server.main --help` to inspect available backends; documenting any new CLI flags keeps the README in sync.\n\n## Coding Style & Naming Conventions\nFollow PEP 8 with 4-space indents and descriptive snake_case for Python functions, PascalCase for classes, and UPPER_SNAKE_CASE for constants. The repo uses `black` with a 120-character line length (`black ktransformers scripts`). Co-locate Triton or CUDA kernels beside their Python wrappers and mirror filenames (`foo_kernel.cu` ↔ `foo_kernel.py`) for discoverability. Prefer type hints for new interfaces and keep module-level docstrings brief and actionable.\n\n## Testing Guidelines\nUnit and integration suites live under `ktransformers/tests/` (`unit/`, `integration/`, `profiling/`). Run targeted suites with `pytest ktransformers/tests/unit` before opening a PR, and execute hardware-sensitive checks (`pytest ktransformers/tests/integration`) when modifying scheduler or kernel logic. Performance regressions should be validated using `python ktransformers/tests/test_speed.py --api_url ...` and the relevant model assets in `data/`. Aim to keep new code covered by at least one automated test or documented benchmark.\n\n## Commit & Pull Request Guidelines\nGit history favors concise, imperative subject lines, optionally scoped (`docs: refresh deployment notes`). Group related changes into single commits and include context in the body when touching kernels or performance-critical paths. PRs should summarize the change, list validation steps (`pytest`, benchmarks, or manual runs), and link to specs in `specs/` or issues when applicable. Attach logs or screenshots for UI-leaning updates (CLI output, benchmark tables) so reviewers can verify results quickly.\n","source":"cli","git":{"commit_hash":"d188947bc050239dd85121992e4e9b897139f285","branch":"main","repository_url":"git@github.com:ddxxlao/ktransformers.git"}}}
{"timestamp":"2025-10-13T17:39:43.058Z","type":"response_item","payload":{"type":"message","role":"user","content":[{"type":"input_text","text":"<user_instructions>\n\n# Repository Guidelines\n\n## Project Structure & Module Organization\nCore Python modules live in `ktransformers/` (scheduler logic, server entrypoints, optimization rules). CUDA/C++ kernels and build helpers sit in `csrc/`, with compiled artifacts landing under `build/`. Reference models, prompts, and evaluation sets are versioned in `data/` and `ktransformers/tests/`. Documentation and specs reside in `docs/` and `specs/`, while automation scripts live in `scripts/` (for example `scripts/initial_build.sh`). Treat `third_party/` as read-only vendor code.\n\n## Build, Test, and Development Commands\nInstall editable dependencies with `pip install -e .` from `/workspace` to make the Python package importable. Use `bash scripts/initial_build.sh` for a full CUDA toolchain bootstrap, or `bash scripts/quick_build.sh` for incremental rebuilds after minor changes. Launch the FastAPI server locally via `python -m ktransformers.server.main --help` to inspect available backends; documenting any new CLI flags keeps the README in sync.\n\n## Coding Style & Naming Conventions\nFollow PEP 8 with 4-space indents and descriptive snake_case for Python functions, PascalCase for classes, and UPPER_SNAKE_CASE for constants. The repo uses `black` with a 120-character line length (`black ktransformers scripts`). Co-locate Triton or CUDA kernels beside their Python wrappers and mirror filenames (`foo_kernel.cu` ↔ `foo_kernel.py`) for discoverability. Prefer type hints for new interfaces and keep module-level docstrings brief and actionable.\n\n## Testing Guidelines\nUnit and integration suites live under `ktransformers/tests/` (`unit/`, `integration/`, `profiling/`). Run targeted suites with `pytest ktransformers/tests/unit` before opening a PR, and execute hardware-sensitive checks (`pytest ktransformers/tests/integration`) when modifying scheduler or kernel logic. Performance regressions should be validated using `python ktransformers/tests/test_speed.py --api_url ...` and the relevant model assets in `data/`. Aim to keep new code covered by at least one automated test or documented benchmark.\n\n## Commit & Pull Request Guidelines\nGit history favors concise, imperative subject lines, optionally scoped (`docs: refresh deployment notes`). Group related changes into single commits and include context in the body when touching kernels or performance-critical paths. PRs should summarize the change, list validation steps (`pytest`, benchmarks, or manual runs), and link to specs in `specs/` or issues when applicable. Attach logs or screenshots for UI-leaning updates (CLI output, benchmark tables) so reviewers can verify results quickly.\n\n\n</user_instructions>"}]}}
{"timestamp":"2025-10-13T17:39:43.058Z","type":"response_item","payload":{"type":"message","role":"user","content":[{"type":"input_text","text":"<environment_context>\n  <cwd>/workspace</cwd>\n  <approval_policy>on-request</approval_policy>\n  <sandbox_mode>read-only</sandbox_mode>\n  <network_access>restricted</network_access>\n  <shell>bash</shell>\n</environment_context>"}]}}
